using cleansing;
using udf;

$politicians_in = read from '../resources/govwild/input/OriginalFreebasePolitician.json';


// SCRUBBING
$politicians_scrubbed = scrub $politicians_in with rules {
	_id: [required, concat_strings("_P")],
	id: required,
	name: [required, normalize_name("/home/tommy-neubert/Arbeitsfl√§che/Hiwi/Repositories/cleansing-example/examples/src/main/resources/govwild/scrub/officialTitles.Prefix.dict")],
	party: required?: default(""),
	
	governmentPositionsHeld: required?: default([]),
	electionCampaigns: required?: default([]),
	legislativeCommitteesServedOn: required?: default([])
};
write $politicians_scrubbed to '../resources/govwild/output/SCRUB_Politicians.json';


// ENTITY EXTRACTION
// TODO:
//  1. implement the array access alternative in entity mapping
//  2. implement the possibility to the whole input object as value
$politicians = map entities of $politicians_scrubbed into [
	entity $politicians identified by $politicians_scrubbed.id with {
		_id: $politicians_scrubbed._id,
		party: $politicians_scrubbed.party,
		
		firstName: array_get($politicians_scrubbed.name, 0),
		middleName: array_get($politicians_scrubbed.name, 1),
		lastName: array_get($politicians_scrubbed.name, 2),
		nameAddition: array_get($politicians_scrubbed.name, 3),
		
		original: $politicians_scrubbed.id
	}
];
write $politicians to '../resources/govwild/output/EXTRACT_Politicians.json';

// write $politicians_scrubbed to '../../resources/govwild/output/Politicians.json';