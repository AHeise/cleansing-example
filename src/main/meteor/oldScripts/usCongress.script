using cleansing;
using udf;

//path constants
path = fn() { "/home/fabian/Development/Stratosphere/cleansing-example/input/scrub/" };

//path = fn() { "/home/tommy-neubert/Arbeitsfl√§che/Hiwi/Repositories/cleansing-example/examples/src/main/resources/govwild/scrub/"};

$usCongress = read from '../../../input/OriginalUsCongress.json';

$usCongress = sample $usCongress selectEvery 1000;

$usCongress_scrubbed = scrub $usCongress with rules {
	_id: [required, concat_strings("_P")],
	memberName: required,
	biography: required,
	party: required,
    congress:required
};

$usCongressParties, $usCongressPersons = map entities of $usCongress_scrubbed
into [
    entity $usCongressParties identified by dict_replace($usCongress_scrubbed.party, path(), "parties") with {
    	original: $usCongress_scrubbed._id,
    	name: $usCongress_scrubbed.party,
    	type: {category: "party"}
    },
    entity $usCongressPersons identified by $usCongress_scrubbed.biography with {
       	_source: "uscongress",
       	originals : all($usCongress_scrubbed._id),
       	firstName: trim(split($usCongress_scrubbed.memberName, " ")[1]),
       	middleName: split($usCongress_scrubbed.memberName, " ")[2] ?: null,
       	lastName: split($usCongress_scrubbed.memberName, ",")[0],
      	nameAddition: remove_all_characters(split($usCongress_scrubbed.memberName, " ")[3] ?:"", "()") ?: null,
        biography: $usCongress_scrubbed.biography,
    	birth : split(replace($usCongress_scrubbed.birthDeath ? : "", '[^0-9-]', ""), "-")[0] ? split(replace($usCongress_scrubbed.birthDeath ? : "", '[^0-9-]', ""), "-")[0] as int : null,
        death : split(replace($usCongress_scrubbed.birthDeath ? : "", '[^0-9-]', ""), "-")[1] ? split(replace($usCongress_scrubbed.birthDeath ? : "", '[^0-9-]', ""), "-")[1] as int : null,
        worksForParty: all({
        				legalEntity : 3,
        				startYear: split($usCongress_scrubbed.congress, "\(")[1] ? split(replace(split($usCongress_scrubbed.congress, "\(")[1],  '[^0-9-]', ""), "-")[0] as int : null,
                   		endYear: split($usCongress_scrubbed.congress, "\(")[1] ? split(replace(split($usCongress_scrubbed.congress, "\(")[1],  '[^0-9-]', ""), "-")[0] as int : null
                    }),
        worksForState: all({
                    	congressNumber: (split($usCongress_scrubbed.congress, "\(") ? split($usCongress_scrubbed.congress, "\(")[0] : $usCongress_scrubbed.congress) as int,
                   		startYear: split($usCongress_scrubbed.congress, "\(")[1] ? split(replace(split($usCongress_scrubbed.congress, "\(")[1],  '[^0-9-]', ""), "-")[0] as int : null,
                   		endYear: split($usCongress_scrubbed.congress, "\(")[1] ? split(replace(split($usCongress_scrubbed.congress, "\(")[1],  '[^0-9-]', ""), "-")[0] as int : null,
                   		position : $usCongress_scrubbed.position,
                   		legalEntity : dict_replace($usCongress_scrubbed.state, path(), "states")
                   	}),
        foo: $usCongressParties.id
    }
];

$usCongressPersons = transform $usCongressPersons into {
		_source: $usCongressPersons._source,
       	originals : $usCongressPersons.originals,
       	firstName: $usCongressPersons.firstName,
       	middleName: $usCongressPersons.middleName,
       	lastName: $usCongressPersons.lastName,
      	nameAddition: $usCongressPersons.nameAddition,
        biography: $usCongressPersons.biography,
    	birth : $usCongressPersons.birth,
        death : $usCongressPersons.death,
        foo: $usCongressPersons.foo,
        worksFor: unionAll($usCongressPersons.worksForParty, $usCongressPersons.worksForState)
};

//$usCongressPersons = group $usCongressPersons by $usCongressPersons.biography into {
//		_source: $usCongressPersons[0]._source,
//       	originals : all($usCongressPersons.originals),
//       	firstName: $usCongressPersons[0].firstName,
//       	middleName: $usCongressPersons[0].middleName,
//       	lastName: $usCongressPersons[0].lastName,
//      	nameAddition: $usCongressPersons[0].nameAddition,
//        biography: $usCongressPersons[0].biography,
//    	birth : $usCongressPersons[0].birth,
//        death : $usCongressPersons[0].death,
//        worksFor: arrayMerge($usCongressPersons[*].worksFor)
//};

$usCongressParties_scrubbed = scrub $usCongressParties with rules {
	id:  dict_replace(path(), "parties"),
	name: notContainedIn(["Unknown"])
};

$usCongressPersons_scrubbed = scrub $usCongressPersons with rules {
	lastName: [camelCase(), illegalCharacters(", ")?: removeIllegalCharacters]
};

write $usCongressPersons_scrubbed to 'file:///home/fabian/Development/Stratosphere/cleansing-example/output/usCongress_scrubbedPersons.json';
write $usCongressParties_scrubbed to 'file:///home/fabian/Development/Stratosphere/cleansing-example/output/usCongress_scrubbedParties.json';