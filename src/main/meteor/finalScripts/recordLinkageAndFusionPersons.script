using cleansing;
using udf;

//path constants
path = "/home/fabian/Development/Stratosphere/cleansing-example/input/scrub/";

$congressPoliticians = read from  '../../../../output/congressPoliticians.json';
$freebasePoliticians_extracted = read from '../../../../output/freebasePoliticians_extracted.json';
$earmarksPoliticians = read from '../../../../output/earmarksPoliticians.json';

compareParty = fn(party1, party2) { (lower_case(party1) == lower_case(party2) && (party1 != ""))? 1 : 0 };
compareMidName = fn(midName1, midName2) { (midName1 == "" || midName2 == "")? 0.8 : jaroWinkler(midName1,midName2)};
compareYear = fn(year1,year2) { ((year1 && year2) && (year1 == year2)) ? 1 : 0 };

$persons_cluster1 = link records $congressPoliticians, $freebasePoliticians_extracted
//two SNM runs
sort on [{$usCongressPersons.firstName : $FreebasePoliticians.firstName}, {$usCongressPersons.lastName : $FreebasePoliticians.lastName}]
	where  ((
		5*jaroWinkler($usCongressPersons.firstName, $FreebasePoliticians.firstName) +
		5*jaroWinkler($usCongressPersons.lastName, $FreebasePoliticians.lastName) +
		3*compareMidName($usCongressPersons.middleName, $FreebasePoliticians.middleName)
		
		//compareParty($usCongressPersons.worksFor[0].legalEntity, $FreebasePoliticians.worksFor[0].legalEntity) +
		//compareYear($usCongressPersons.worksFor[1].startYear, $FreebasePoliticians.worksFor[1].startYear) +
		//compareYear($usCongressPersons.worksFor[1].endYear, $FreebasePoliticians.worksFor[1].endYear)		
		)/13 > 0.75);
	
	
$persons = fuse $persons_cluster1
with weights {
	freebase: 0.7,
	uscongress: 1.0
}
with resolutions {
originals: mergeDistinct,

firstName: mostFrequent,
middleName: mostFrequent,
lastName: mostFrequent,

worksFor: mostFrequent,
biography: mostFrequent,
birth: mostFrequent,
death: mostFrequent
};

write $persons to '../../../../output/persons_FINAL.json';